@startuml 콘서트 예약 시스템 인프라 구성도

skinparam rectangle {
    BackgroundColor<<사용자>> #E1F5FE
    BackgroundColor<<로드밸런서>> #F3E5F5
    BackgroundColor<<애플리케이션>> #E8F5E8
    BackgroundColor<<캐시>> #FFF3E0
    BackgroundColor<<데이터베이스>> #FFEBEE
}

rectangle "사용자\n(웹/모바일)" as user <<사용자>>

package "로드밸런서" {
    rectangle "로드밸런서\n(트래픽 분산)" as lb <<로드밸런서>>
}

package "애플리케이션 서버" {
    rectangle "콘서트 API 서버 1\n- 대기열 관리\n- 예약 처리\n- 결제 처리" as app1 <<애플리케이션>>
    rectangle "콘서트 API 서버 2\n- 대기열 관리\n- 예약 처리\n- 결제 처리" as app2 <<애플리케이션>>
}

package "캐시 (Redis)" {
    rectangle "Redis 마스터\n- 대기열 순서 저장\n- 활성 사용자 관리\n- 좌석 임시 잠금" as redis_master <<캐시>>
    rectangle "Redis 슬레이브\n- 읽기 전용" as redis_slave <<캐시>>
}

package "데이터베이스 (MySQL)" {
    rectangle "MySQL 마스터\n- 사용자 정보\n- 콘서트 정보\n- 예약/결제 데이터" as mysql_master <<데이터베이스>>
    rectangle "MySQL 슬레이브\n- 읽기 전용" as mysql_slave <<데이터베이스>>
}

package "백그라운드 작업" {
    rectangle "대기열 처리기\n- 순서 업데이트\n- 토큰 만료 처리" as queue_worker <<애플리케이션>>
    rectangle "예약 정리기\n- 만료된 예약 정리\n- 좌석 해제" as cleanup_worker <<애플리케이션>>
}


' 연결 관계
user --> lb : "요청"
lb --> app1 : "분산"
lb --> app2 : "분산"

app1 --> redis_master : "대기열\n조회/업데이트"
app2 --> redis_master : "대기열\n조회/업데이트"
app1 --> redis_slave : "읽기"
app2 --> redis_slave : "읽기"

redis_master --> redis_slave : "복제"

app1 --> mysql_master : "쓰기"
app2 --> mysql_master : "쓰기"
app1 --> mysql_slave : "읽기"
app2 --> mysql_slave : "읽기"

mysql_master --> mysql_slave : "복제"

queue_worker --> redis_master : "상태 업데이트"
queue_worker --> mysql_master : "토큰 정보"
cleanup_worker --> redis_master : "좌석 해제"
cleanup_worker --> mysql_master : "예약 정리"


note as simple_note
**콘서트 예약 시스템의 핵심 구성:**

**사용자 요청 흐름:**
1. 사용자가 웹/모바일로 접속
2. 로드밸런서가 여러 서버로 요청 분산
3. API 서버가 Redis에서 대기열 확인
4. MySQL에서 콘서트/예약 정보 조회/저장

**대기열 관리:**
• Redis에서 빠른 대기순서 관리
• 백그라운드에서 자동으로 순서 업데이트
• 만료된 예약 자동 정리

**고가용성 보장:**
• 서버가 여러 대 (한 대 장애시 다른 서버 사용)
• Redis/MySQL 모두 마스터-슬레이브 구조
• 데이터 백업 및 복제

**성능 최적화:**
• Redis 캐시로 빠른 대기열 조회
• MySQL 읽기/쓰기 분리
• 로드밸런서로 부하 분산
end note

@enduml